// Export utilities for different file formats

export const exportAsTxt = (content: string, filename?: string) => {
  const blob = new Blob([content], { type: 'text/plain;charset=utf-8' })
  const url = URL.createObjectURL(blob)
  const a = document.createElement('a')
  a.href = url
  a.download = filename || `generation-${Date.now()}.txt`
  document.body.appendChild(a)
  a.click()
  document.body.removeChild(a)
  URL.revokeObjectURL(url)
}

export const exportAsHtml = (content: string, filename?: string) => {
  const htmlContent = `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Generated Content</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            color: #333;
        }
        .content {
            white-space: pre-wrap;
            background: #f9f9f9;
            padding: 20px;
            border-radius: 8px;
            border-left: 4px solid #3b82f6;
        }
        .header {
            text-align: center;
            margin-bottom: 30px;
            color: #666;
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>Generated Content</h1>
        <p>Created on ${new Date().toLocaleDateString()} at ${new Date().toLocaleTimeString()}</p>
    </div>
    <div class="content">${content}</div>
</body>
</html>
  `
  
  const blob = new Blob([htmlContent], { type: 'text/html;charset=utf-8' })
  const url = URL.createObjectURL(blob)
  const a = document.createElement('a')
  a.href = url
  a.download = filename || `generation-${Date.now()}.html`
  document.body.appendChild(a)
  a.click()
  document.body.removeChild(a)
  URL.revokeObjectURL(url)
}

export const exportAsMarkdown = (content: string, filename?: string) => {
  const markdownContent = `# Generated Content

*Created on ${new Date().toLocaleDateString()} at ${new Date().toLocaleTimeString()}*

---

${content}

---

*Generated by AI Writing Assistant*
`
  
  const blob = new Blob([markdownContent], { type: 'text/markdown;charset=utf-8' })
  const url = URL.createObjectURL(blob)
  const a = document.createElement('a')
  a.href = url
  a.download = filename || `generation-${Date.now()}.md`
  document.body.appendChild(a)
  a.click()
  document.body.removeChild(a)
  URL.revokeObjectURL(url)
}

// Simple PDF export using browser's print functionality
export const exportAsPdf = (content: string) => {
  const printWindow = window.open('', '_blank')
  if (!printWindow) return

  const htmlContent = `
<!DOCTYPE html>
<html>
<head>
    <title>Generated Content</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            margin: 20px;
            color: #333;
        }
        .content {
            white-space: pre-wrap;
            margin-top: 20px;
        }
        .header {
            text-align: center;
            margin-bottom: 30px;
            border-bottom: 2px solid #333;
            padding-bottom: 10px;
        }
        @media print {
            body { margin: 0; }
            .no-print { display: none; }
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>Generated Content</h1>
        <p>Created on ${new Date().toLocaleDateString()} at ${new Date().toLocaleTimeString()}</p>
    </div>
    <div class="content">${content}</div>
    <div class="no-print" style="margin-top: 20px; text-align: center;">
        <button onclick="window.print()" style="padding: 10px 20px; background: #3b82f6; color: white; border: none; border-radius: 5px; cursor: pointer;">
            Print/Save as PDF
        </button>
    </div>
</body>
</html>
  `

  printWindow.document.write(htmlContent)
  printWindow.document.close()
  
  // Auto-trigger print dialog
  setTimeout(() => {
    printWindow.print()
  }, 500)
}

// Copy to clipboard with fallback
export const copyToClipboard = async (content: string): Promise<boolean> => {
  try {
    if (navigator.clipboard && window.isSecureContext) {
      await navigator.clipboard.writeText(content)
      return true
    } else {
      // Fallback for older browsers
      const textArea = document.createElement('textarea')
      textArea.value = content
      textArea.style.position = 'fixed'
      textArea.style.left = '-999999px'
      textArea.style.top = '-999999px'
      document.body.appendChild(textArea)
      textArea.focus()
      textArea.select()
      
      const successful = document.execCommand('copy')
      document.body.removeChild(textArea)
      return successful
    }
  } catch (error) {
    console.error('Failed to copy to clipboard:', error)
    return false
  }
}

// Save to localStorage with timestamp
export const saveToHistory = (content: string, settings: any, template: string) => {
  const item = {
    id: Date.now().toString(),
    content,
    settings,
    template,
    timestamp: new Date().toISOString()
  }

  try {
    const existingHistory = localStorage.getItem('writer-history')
    const history = existingHistory ? JSON.parse(existingHistory) : []
    history.unshift(item)
    
    // Keep only last 50 items
    const trimmedHistory = history.slice(0, 50)
    localStorage.setItem('writer-history', JSON.stringify(trimmedHistory))
    
    return true
  } catch (error) {
    console.error('Failed to save to history:', error)
    return false
  }
}

// Load history from localStorage
export const loadHistory = () => {
  try {
    const history = localStorage.getItem('writer-history')
    return history ? JSON.parse(history) : []
  } catch (error) {
    console.error('Failed to load history:', error)
    return []
  }
}

// Clear history
export const clearHistory = () => {
  try {
    localStorage.removeItem('writer-history')
    return true
  } catch (error) {
    console.error('Failed to clear history:', error)
    return false
  }
}
